from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect
from fastapi.responses import FileResponse
from fastapi.templating import Jinja2Templates
import os, shlex, asyncssh, json

templates = Jinja2Templates(directory="templates")

app = FastAPI(root_path="/accountshub")

@app.get("/")
async def root(request: Request):
    return templates.TemplateResponse(
        "index.html",
        {"request": request, "root_path": request.scope.get("root_path", "")}
    )

@app.get("/static/{filename}")
async def get_static(filename: str, request: Request):
    file_path = os.path.join("/app/accounts-hub/static", filename)
    if os.path.isfile(file_path):
        return FileResponse(file_path)
    return {"error": "File not found"}

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        data = await websocket.receive_text()
        params = json.loads(data)

        servers_raw = params.get("servers", "")
        ssh_user = params.get("ssh_user")
        ssh_password = params.get("ssh_password")
        target_user = params.get("target_user")
        action = params.get("action")
        new_password = params.get("new_password", "")

        servers = [s.strip() for s in servers_raw.splitlines() if s.strip()]
        if not servers:
            await websocket.send_text("ERROR: No servers provided")
            await websocket.close()
            return

        await websocket.send_text(f"Performing '{action}' on {len(servers)} server(s)...")

        for host in servers:
            await websocket.send_text(f"\n--- Processing {host} ---")
            try:
                async with asyncssh.connect(host, username=ssh_user, password=ssh_password, known_hosts=None) as conn:
                    cmd = ""
                    if action == "add":
                        cmd = f"sudo useradd {shlex.quote(target_user)} && echo 'User {target_user} added.'"
                    elif action == "delete":
                        cmd = f"sudo userdel -r {shlex.quote(target_user)} && echo 'User {target_user} deleted.'"
                    elif action == "reset":
                        cmd = f"echo '{shlex.quote(target_user)}:{shlex.quote(new_password)}' | sudo chpasswd && echo 'Password reset for {target_user}.'"
                    elif action == "unlock":
                        cmd = f"sudo passwd -u {shlex.quote(target_user)} && echo 'User {target_user} unlocked.'"
                    else:
                        await websocket.send_text(f"Unknown action: {action}")
                        continue

                    result = await conn.run(cmd, check=True)
                    await websocket.send_text(result.stdout.strip())
            except Exception as e:
                await websocket.send_text(f"Failed on {host}: {str(e)}")

        await websocket.send_text("\nAll done.")
        await websocket.close()

    except WebSocketDisconnect:
        print("Client disconnected")
    except Exception as e:
        await websocket.send_text(f"ERROR: {str(e)}")
        await websocket.close()

